" Make vim more useful
set nocompatible

" Plug
call plug#begin('~/.vim/plugged')

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

Plug 'w0rp/ale'

Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'

Plug 'chrisbra/NrrwRgn'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'

Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust' }

Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

Plug 'ajh17/Spacegray.vim'

call plug#end()

" Leader
let mapleader=' '
nnoremap <space> <nop>

" UI
syntax on

set background=dark
colorscheme spacegray

set splitright
set splitbelow

" Line numbers
set number
set relativenumber

" Status line
set laststatus=2
set noshowmode

let g:lightline = {}
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
let g:lightline.active = {
      \ 'left': [ [ 'mode', 'paste' ],
      \           [ 'readonly', 'filename', 'modified' ] ],
      \ 'right': [ [ 'lineinfo' ],
      \            [ 'percent' ],
      \            [ 'fileformat', 'fileencoding', 'filetype' ],
      \            [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ] }

" Search
set hlsearch
set ignorecase
set smartcase
set incsearch
set wrapscan

" Common settings
set title
set ruler
set noerrorbells
set scrolloff=1
set autoread
set formatoptions+=j " Delete comment character when joining commented lines
set autoindent " Copy indent from last line when starting new line
set backspace=indent,eol,start
set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
set encoding=utf-8 nobomb " BOM often causes trouble
set expandtab " Expand tabs to spaces
set hidden " When a buffer is brought to foreground, remember undo history and marks
set nojoinspaces " Only insert single space after a '.', '?' and '!' with a join command
set shiftwidth=2 " The # of spaces for indenting
set smarttab " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces
set softtabstop=2 " Tab key results in 2 spaces
set suffixes=.bak,~,.swp,.swo,.o,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll
set undofile " Persistent Undo

" Wildmenu
set wildmenu
set wildignore+=.DS_Store

" Toggle show tabs and trailing spaces (,c)
set lcs=tab:›\ ,trail:·,eol:¬,nbsp:_
set fcs=fold:-
nnoremap <silent> <leader>c :set nolist!<CR>

" Yank from cursor to end of line
nnoremap Y y$

" FZF
nnoremap <leader>pf :GFiles<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fs :w<CR>

" Auto pairs
let g:AutoPairsFlyMode = 1

" Linting
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
let g:ale_lint_on_text_changed = 'never'

" Fixing
let g:ale_fix_on_save = 1
let b:ale_fixers = {'javascript': ['prettier', 'eslint']}

" Completions
let g:deoplete#enable_at_startup = 1

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" Rust
let g:ale_linters = {'rust': ['cargo']}
let g:rustfmt_autosave = 1

let g:racer_cmd = "/Users/foxmk/.cargo/bin/racer"
let g:racer_experimental_completer = 1

let g:deoplete#sources#rust#racer_binary='/Users/foxmk/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path= '/Users/foxmk/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src'
